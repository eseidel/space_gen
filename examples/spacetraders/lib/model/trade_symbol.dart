enum TradeSymbol {
  preciousStones('PRECIOUS_STONES'),
  quartzSand('QUARTZ_SAND'),
  siliconCrystals('SILICON_CRYSTALS'),
  ammoniaIce('AMMONIA_ICE'),
  liquidHydrogen('LIQUID_HYDROGEN'),
  liquidNitrogen('LIQUID_NITROGEN'),
  iceWater('ICE_WATER'),
  exoticMatter('EXOTIC_MATTER'),
  advancedCircuitry('ADVANCED_CIRCUITRY'),
  gravitonEmitters('GRAVITON_EMITTERS'),
  iron('IRON'),
  ironOre('IRON_ORE'),
  copper('COPPER'),
  copperOre('COPPER_ORE'),
  aluminum('ALUMINUM'),
  aluminumOre('ALUMINUM_ORE'),
  silver('SILVER'),
  silverOre('SILVER_ORE'),
  gold('GOLD'),
  goldOre('GOLD_ORE'),
  platinum('PLATINUM'),
  platinumOre('PLATINUM_ORE'),
  diamonds('DIAMONDS'),
  uranite('URANITE'),
  uraniteOre('URANITE_ORE'),
  meritium('MERITIUM'),
  meritiumOre('MERITIUM_ORE'),
  hydrocarbon('HYDROCARBON'),
  antimatter('ANTIMATTER'),
  fertilizers('FERTILIZERS'),
  fabrics('FABRICS'),
  food('FOOD'),
  jewelry('JEWELRY'),
  machinery('MACHINERY'),
  firearms('FIREARMS'),
  assaultRifles('ASSAULT_RIFLES'),
  militaryEquipment('MILITARY_EQUIPMENT'),
  explosives('EXPLOSIVES'),
  labInstruments('LAB_INSTRUMENTS'),
  ammunition('AMMUNITION'),
  electronics('ELECTRONICS'),
  shipPlating('SHIP_PLATING'),
  equipment('EQUIPMENT'),
  fuel('FUEL'),
  medicine('MEDICINE'),
  drugs('DRUGS'),
  clothing('CLOTHING'),
  microprocessors('MICROPROCESSORS'),
  plastics('PLASTICS'),
  polynucleotides('POLYNUCLEOTIDES'),
  biocomposites('BIOCOMPOSITES'),
  nanobots('NANOBOTS'),
  aiMainframes('AI_MAINFRAMES'),
  quantumDrives('QUANTUM_DRIVES'),
  roboticDrones('ROBOTIC_DRONES'),
  cyberImplants('CYBER_IMPLANTS'),
  geneTherapeutics('GENE_THERAPEUTICS'),
  neuralChips('NEURAL_CHIPS'),
  moodRegulators('MOOD_REGULATORS'),
  viralAgents('VIRAL_AGENTS'),
  microFusionGenerators('MICRO_FUSION_GENERATORS'),
  supergrains('SUPERGRAINS'),
  laserRifles('LASER_RIFLES'),
  holographics('HOLOGRAPHICS'),
  shipSalvage('SHIP_SALVAGE'),
  relicTech('RELIC_TECH'),
  novelLifeforms('NOVEL_LIFEFORMS'),
  botanicalSpecimens('BOTANICAL_SPECIMENS'),
  culturalArtifacts('CULTURAL_ARTIFACTS'),
  reactorSolarI('REACTOR_SOLAR_I'),
  reactorFusionI('REACTOR_FUSION_I'),
  reactorFissionI('REACTOR_FISSION_I'),
  reactorChemicalI('REACTOR_CHEMICAL_I'),
  reactorAntimatterI('REACTOR_ANTIMATTER_I'),
  engineImpulseDriveI('ENGINE_IMPULSE_DRIVE_I'),
  engineIonDriveI('ENGINE_ION_DRIVE_I'),
  engineIonDriveIi('ENGINE_ION_DRIVE_II'),
  engineHyperDriveI('ENGINE_HYPER_DRIVE_I'),
  moduleMineralProcessorI('MODULE_MINERAL_PROCESSOR_I'),
  moduleCargoHoldI('MODULE_CARGO_HOLD_I'),
  moduleCrewQuartersI('MODULE_CREW_QUARTERS_I'),
  moduleEnvoyQuartersI('MODULE_ENVOY_QUARTERS_I'),
  modulePassengerCabinI('MODULE_PASSENGER_CABIN_I'),
  moduleMicroRefineryI('MODULE_MICRO_REFINERY_I'),
  moduleOreRefineryI('MODULE_ORE_REFINERY_I'),
  moduleFuelRefineryI('MODULE_FUEL_REFINERY_I'),
  moduleScienceLabI('MODULE_SCIENCE_LAB_I'),
  moduleJumpDriveI('MODULE_JUMP_DRIVE_I'),
  moduleJumpDriveIi('MODULE_JUMP_DRIVE_II'),
  moduleJumpDriveIii('MODULE_JUMP_DRIVE_III'),
  moduleWarpDriveI('MODULE_WARP_DRIVE_I'),
  moduleWarpDriveIi('MODULE_WARP_DRIVE_II'),
  moduleWarpDriveIii('MODULE_WARP_DRIVE_III'),
  moduleShieldGeneratorI('MODULE_SHIELD_GENERATOR_I'),
  moduleShieldGeneratorIi('MODULE_SHIELD_GENERATOR_II'),
  mountGasSiphonI('MOUNT_GAS_SIPHON_I'),
  mountGasSiphonIi('MOUNT_GAS_SIPHON_II'),
  mountGasSiphonIii('MOUNT_GAS_SIPHON_III'),
  mountSurveyorI('MOUNT_SURVEYOR_I'),
  mountSurveyorIi('MOUNT_SURVEYOR_II'),
  mountSurveyorIii('MOUNT_SURVEYOR_III'),
  mountSensorArrayI('MOUNT_SENSOR_ARRAY_I'),
  mountSensorArrayIi('MOUNT_SENSOR_ARRAY_II'),
  mountSensorArrayIii('MOUNT_SENSOR_ARRAY_III'),
  mountMiningLaserI('MOUNT_MINING_LASER_I'),
  mountMiningLaserIi('MOUNT_MINING_LASER_II'),
  mountMiningLaserIii('MOUNT_MINING_LASER_III'),
  mountLaserCannonI('MOUNT_LASER_CANNON_I'),
  mountMissileLauncherI('MOUNT_MISSILE_LAUNCHER_I'),
  mountTurretI('MOUNT_TURRET_I'),
  ;

  const TradeSymbol(this.value);

  factory TradeSymbol.fromJson(String json) {
    return TradeSymbol.values.firstWhere(
      (value) => value.value == json,
      orElse: () => throw Exception('Unknown TradeSymbol value: $json'),
    );
  }

  final String value;

  String toJson() => value;
}
