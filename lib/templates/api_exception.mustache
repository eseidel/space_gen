import 'package:meta/meta.dart';

/// An exception thrown by the API client.
///
/// This is a wrapper around the underlying network exceptions.
/// This is used to provide a standard exception type for clients to handle.
@immutable
class ApiException implements Exception {
  const ApiException(this.code, this.message)
      : innerException = null,
      stackTrace = null;

  const ApiException.withInner(
      this.code, this.message, this.innerException, this.stackTrace);

  final int code;
  final String? message;
  final Exception? innerException;
  final StackTrace? stackTrace;

  @override
  String toString() {
    if (message == null) {
      return 'ApiException';
    }
    if (innerException == null) {
      return 'ApiException $code: $message';
    }
    return 'ApiException $code: $message '
        '(Inner exception: $innerException)\n\n$stackTrace';
  }
}

/// Validates an argument.
///
/// This is a helper function that throws an exception if the condition is false.
/// It is used to validate arguments in the generated code.
// ignore: avoid_positional_boolean_parameters
void validateArg(bool condition, String message) {
  if (!condition) {
    throw Exception(message);
  }
}